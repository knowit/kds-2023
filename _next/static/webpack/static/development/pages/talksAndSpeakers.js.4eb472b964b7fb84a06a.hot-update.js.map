{"version":3,"file":"static/webpack/static/development/pages/talksAndSpeakers.js.4eb472b964b7fb84a06a.hot-update.js","sources":["webpack:///./pages/talksAndSpeakers.tsx"],"sourcesContent":["import Layout from \"./components/Layout\";\nimport Talk from \"./components/Talk\";\nimport \"../styling/talksAndSpeakersStyles.scss\";\nimport React from \"react\";\nimport {program as Program} from \"../models/data.json\";\nimport {Time, getDuration} from \"../helpers/time\";\nimport Filter from './components/Filter';\n\nclass TalksAndSpeakers extends React.Component<any, any> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filteredProgram: JSON.parse(JSON.stringify(Program)), // Need a deep copy\n            showOnlyFavorites: false,\n            tags: []\n        }\n        this.handleFilterChange = this.handleFilterChange.bind(this);\n        this.handleFavoriteChange = this.handleFavoriteChange.bind(this);\n    }\n\n    handleFilterChange(newVal) {\n        this.setState({tags: newVal}, this.filterProgram);\n    }\n\n    handleFavoriteChange(newVal) {\n        this.setState({showOnlyFavorites: newVal}, this.filterProgram);\n    }\n\n    handleToggleTag(tag) {\n        this.setState((prev) => {\n            if (prev.tags.indexOf(tag) > -1) {\n                return {tags: prev.tags.filter(t => t != tag)};\n            }\n            return {tags: prev.tags.concat(tag)};\n\n        }, this.filterProgram);\n    }\n\n    filterProgram() {\n        let filteredProgram = JSON.parse(JSON.stringify(Program));\n        filteredProgram.days\n            .forEach(day => day.slots\n                .forEach(slot => slot.rooms && slot.rooms\n                    .forEach(room => {\n                        room.talks\n                            .forEach(talk => {\n                                const tags = talk.tags.concat([talk.language])\n\n                                if (this.state.showOnlyFavorites && !localStorage.getItem(talk.talkId)) {\n                                    talk.hide = true;\n                                } else if (this.state.tags.length > 0 && !tags.some(tag => this.state.tags.indexOf(tag) > -1)) {\n                                    talk.hide = true;\n                                } else {\n                                    talk.hide = false;\n                                }\n                            })\n                    })));\n\n        this.setState({filteredProgram: filteredProgram});\n    }\n\n    render() {\n        return (<div className=\"talksAndSpeakers page\">\n\n                <Layout title=\"Talks & Speakers\" filter={'small'} onTagChange={this.handleFilterChange}\n                        onFavoriteChange={this.handleFavoriteChange} selectedTags={this.state.tags}\n                        showOnlyFavorites={this.state.showOnlyFavorites} background={true}>\n                    <div className=\"talks-container document\">\n\n                        <div className=\"title-filter\">\n                            <Filter onFavoriteChange={this.handleFavoriteChange} onTagChange={this.handleFilterChange}\n                                    selectedTags={this.state.tags} showOnlyFavorites={this.state.showOnlyFavorites}\n                                    className=\"hide-small talks-filter\" type=\"dropdown\"/>\n                            <h1 className=\"title\"> Talks & speakers</h1>\n                        </div>\n\n                        <div className=\"talks\">\n                            {this.state.filteredProgram.days\n                                .map(day => day.slots\n                                    .filter(function (slot) {\n                                        return slot.rooms !== undefined\n                                    })\n                                    .map(slot => slot.rooms\n                                        .map(room => {\n\n                                            let from = Time.fromNumber(slot.timeStart);\n                                            return room.talks\n                                                .map((talk, i) => talk.speakers\n                                                    .map(speaker => {\n                                                        const to = from.copy().add(getDuration(talk));\n                                                        const talkEl = (<div className=\"talk-container\" key={i}>\n                                                            <Talk\n                                                                day={day.day}\n                                                                timeStart={from}\n                                                                timeEnd={to}\n                                                                description={talk.description}\n                                                                speakerInfo={speaker.info}\n                                                                speaker={speaker}\n                                                                title={talk.title}\n                                                                type={talk.type}\n                                                                id={talk.talkId}\n                                                                room={room.name}\n                                                                language={talk.language}\n                                                                key={i}\n                                                                difficulty={talk.difficulty}\n                                                                tags={talk.tags}\n                                                                selectedTags={this.state.tags}\n                                                                onToggleTag={(val) => this.handleToggleTag(val)}\n                                                                onFavoriteChange={() => this.filterProgram()}/>\n                                                        </div>);\n\n                                                        from = to;\n\n                                                        return !talk.hide ? talkEl : '';\n                                                    }))\n                                        })))}\n                        </div>\n                    </div>\n                </Layout>\n            </div>\n        )\n    }\n}\n\nexport default TalksAndSpeakers;\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AARA;AASA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AADA;AAiBA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AAEA;AACA;AA3BA;AA4BA;AAjCA;AAJA;AA2CA;;;;AAjHA;AACA;AAmHA;;;;A","sourceRoot":""}