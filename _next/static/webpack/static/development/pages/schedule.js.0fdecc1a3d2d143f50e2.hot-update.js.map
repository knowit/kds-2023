{"version":3,"file":"static/webpack/static/development/pages/schedule.js.0fdecc1a3d2d143f50e2.hot-update.js","sources":["webpack:///./pages/components/ScheduleEntry.tsx"],"sourcesContent":["import Talk from \"./Talk\";\nimport {Component, CSSProperties} from \"react\";\nimport Room from './Room';\nimport {getDuration, Time} from '../../helpers/time';\n\ninterface IProps {\n    day: string\n    slot: any\n    showRoomHeader: boolean,\n    tags: string[],\n    trackLength: number,\n    onToggleTag: (val) => void\n}\n\nclass ScheduleEntry extends Component<IProps, any> {\n    constructor(props) {\n        super(props);\n    }\n\n    createRoom(room, index: number) {\n        let from = Time.fromNumber(this.props.slot.timeStart);\n        let trackIndex = 0;\n        const talks = room.talks\n            .map((talk, i) => {\n                    const to = from.copy().add(getDuration(talk));\n\n\n                    // const style = { // For ie support, ie support is far from good.. but this makes i maybe useable\n                    //   msGridRow: trackIndex + 2,\n                    //   msGridColumn: index + 1\n                    // };\n\n                    const talkEl = (<div\n                        className={`talk-container ${trackIndex % 2 == 0 ? 'talk-even' : 'talk-odd'} ${index % 2 == 0 ? 'room-even' : 'room-odd'}`}\n                        key={trackIndex}>\n                        <Talk title={talk.title}\n                              speaker={talk.speakers}\n                              room={room.name}\n                              type={talk.type}\n                              language={talk.language}\n                              difficulty={talk.difficulty}\n                              id={talk.talkId}\n                              key={trackIndex}\n                              day={this.props.day}\n                              tags={talk.tags}\n                              timeStart={from}\n                              timeEnd={to}\n                              selectedTags={this.props.tags}\n                              onToggleTag={this.props.onToggleTag}/>\n                    </div>);\n\n                    from = to;\n\n                    if (!talk.hide) {\n                        trackIndex++;\n                    }\n\n                    return !talk.hide ? talkEl : '';\n                }\n            );\n\n\n        const numHidden = room.talks.filter(talk => !talk.hide).length;\n        for (let i = 0; i < this.props.trackLength - numHidden; i++) {\n            const talkIndex = trackIndex + i;\n            talks.push(<div\n                className={`talk-container empty ${talkIndex % 2 == 0 ? 'talk-even' : 'talk-odd'} ${index % 2 == 0 ? 'room-even' : 'room-odd'}`}\n                key={i}/>);\n        }\n\n        return talks;\n    }\n\n    render() {\n        if (this.props.slot && this.props.slot.rooms && this.props.slot.rooms.length == 1) {\n            const room = this.props.slot.rooms[0];\n            return (\n                <div className=\"rooms single-track\">\n                    {this.props.slot.rooms && <Room key={room.name} showRoomHeader={false} room={room}>{\n                        this.createRoom(room, 0)\n                    }</Room>}\n                </div>);\n        } else {\n            // Need to update dimensions of the grid\n            const style = {\n                gridTemplateColumns: `repeat(${this.props.slot && this.props.slot.rooms && this.props.slot.rooms.length}, 1fr)`,\n                gridTemplateRows: `60px ${this.props.trackLength > 0 ? `repeat(${this.props.trackLength}, 1fr)` : ''}`,\n                msGridRows: `60px  ${this.props.trackLength > 0 ? `(1fr)[${this.props.trackLength}]` : ''}`,\n                msGridColumns: `(1fr) [${this.props.slot && this.props.slot.rooms && this.props.slot.rooms.length}]`\n            };\n\n            return (\n                <div className=\"rooms multi-track\" style={style}>\n                    {this.props.slot && this.props.slot.rooms && this.props.slot.rooms.map((r, i) => <Room key={r.name}\n                                                                                                           index={i}\n                                                                                                           showRoomHeader={this.props.showRoomHeader}\n                                                                                                           room={r.name}>\n                        {\n                            this.createRoom(r, i)\n                        }\n                    </Room>)}\n                </div>\n            );\n        }\n    }\n};\n\nexport default ScheduleEntry;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;AA1FA;AACA;AA0FA;AAEA;;;;A","sourceRoot":""}